import test from 'ava';

import {
    gomon
} from '../src';

test('#1 Empty', t => {
    t.is(gomon([]), 0);
});

test('#2 Single number', t => {
    t.is(gomon([ -99 ]), -99, '-99');
    t.is(gomon([ -1 ]), -1, '-1');
    t.is(gomon([ 0 ]), 0, '0');
    t.is(gomon([ 1 ]), 1, '1');
    t.is(gomon([ 99 ]), 99, '99');
});

test('#3 Two numbers', t => {
    t.is(gomon([ 0, 0 ]), 0, '0, 0');
    t.is(gomon([ -1, 0 ]), 0, '(-1, 0)');
    t.is(gomon([ 0, 1 ]), 1, '0, 1');
    t.is(gomon([ -1, 1 ]), 0, '-1, 1');
    t.is(gomon([ -1, -1 ]), 1, '(-1, -1)');
    t.is(gomon([ 1, 1 ]), 2, '1, 1');
});

test('#4 Sequences', t => {
    t.is(gomon([ 0, 1, 2, 3, 4, 5 ]), 27, '0, 1, (2, 3), (4, 5)');
    t.is(gomon([ -5, -4, -3, -2, -1, 0 ]), 26, '(-5, -4), (-3, -2), (-1, 0)');
    t.is(gomon([ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5 ]), 53, '(-5, -4), (-3, -2), (-1, 0), 1, (2, 3), (4, 5)');
    t.is(gomon([ -5, -4, -3, -2, -1, 0, 0, 1, 2, 3, 4, 5 ]), 53, '(-5, -4), (-3, -2), (-1, 0), 0, 1, (2, 3), (4, 5)');
});

test('#5 Duplicates', t => {
    t.is(gomon([ 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 ]), 56, '1, 1, (2, 2), (3, 3), (4, 4), (5, 5)');
    t.is(gomon([ -1, -1, -2, -2, -3, -3, -4, -4, -5, -5 ]), 55, '(-5, -5), (-4, -4), (-3, -3), (-2, -2), (-1, -1)');
});

test('#6 Shuffled', t => {
    t.is(gomon([ 5, 1, 4, 0, 3, 2 ]), 27, '0, 1, (2, 3), (4, 5)');
    t.is(gomon([ -5, -1, -4, 0, -3, -2 ]), 26, '(-5, -4), (-3, -2), (-1, 0)');
    t.is(gomon([ 1, -1, 2, -2, 3, -3, 4, -4, 5, -5 ]), 72, '(-5, -4), (-3, -2), -1, 1, (2, 3), (4, 5)');
});

test('#7 Only 1|-1', t => {
    t.is(gomon([ 1 ]), 1, '1');
    t.is(gomon([ 1, 1 ]), 2, '1, 1');
    t.is(gomon([ 1, 1, 1 ]), 3, '1, 1, 1');
    t.is(gomon([ 1, 1, 1, 1 ]), 4, '1, 1, 1, 1');

    t.is(gomon([ -1 ]), -1, '-1');
    t.is(gomon([ -1, -1 ]), 1, '(-1, -1)');
    t.is(gomon([ -1, -1, -1 ]), 0, '-1, (-1, -1)');
    t.is(gomon([ -1, -1, -1, -1 ]), 2, '(-1, -1), (-1, -1)');
});

test('#8 Big intervals', t => {
    t.is(gomon([ -100, -30, 0, 50, 200 ]), 13000, '(-100, -30), 0, (50, 200)');
});
